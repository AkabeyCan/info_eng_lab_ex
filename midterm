#include <iostream>
#include <vector>
#include<memory>
#include<string>

using namespace std;
class Animal{
protected:
    string name;
    int age;
    double weight;
public:
    Animal(string name,int age,double weight)
        :name(name),age(age),weight(weight){
    }
    void display(){
        cout<<name<<" "<<age<<" "<<weight<<endl;
    }
};
class Mammal:public Animal{
protected:
    bool isHerbivor;
public:
    Mammal(string name, int age,double weight,bool isHerbivor)
        :Animal(name,age,weight),isHerbivor(isHerbivor){
    }
    void display(){

    }
};
class CarnivorMammal:public Mammal{
protected:
    bool isPredator;
public:
    CarnivorMammal(string name,int age,double weight,bool isPredator)
        :Mammal(name,age,weight,false),isPredator(isPredator){}
    void display(){

    }
};
class Reptile:public Animal{
protected:
    bool isVenomous;
public:
    Reptile(string name,int age,double weight,bool isVenomous)
        :Animal(name,age,weight),isVenomous(isVenomous){}
};
void display(){

}
class Zoo {
private:
    vector<unique_ptr<Animal>> animals;
public:
    void addAnimal(unique_ptr<Animal> animal){
        animals.push_back(std::move(animal));
    }
    void display(){
        for(int i = 0; i< animals.size();i++){
            animals[i]->display();
        }
    }
};
//task 2
class Vector2D { public:
Vector2D(double x = 0.0, double y = 0.0) : x(x), y(y) {}



Vector2D operator+(const Vector2D& other){
    float mario;
    mario = x + other.x;

    float luigi =y + other.y;
    Vector2D a(mario,luigi);
    return a;

}


             void showvec(){
                 cout<<x<<" "<<y<<endl;
             }

                          Vector2D operator-(const Vector2D& other){
                              float mario;
                              mario = x - other.x;

                              float luigi =y - other.y;
                              Vector2D a(mario,luigi);
                              return a;

                          }

private:
double x, y;
};

int main()
{
Zoo zoo;

auto mammal1 = make_unique<Mammal>("mamal1",12,1000,true);
auto mammal2 = make_unique<Reptile>("mammal2",12,5000,false);
auto tiger = make_unique<CarnivorMammal>("carnivormammal",200,1000,true);

zoo.addAnimal(std::move(mammal1));

Vector2D vec1(3.4,4.4);
Vector2D vec2(1.0,2.0);

Vector2D sum = vec2  - vec1;
sum.showvec();


    return 0;
}
