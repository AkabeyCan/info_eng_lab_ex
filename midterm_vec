#include <iostream>

using namespace std;

class Vector2D { public:
Vector2D(double x = 0.0, double y = 0.0) : x(x), y(y) {}


             Vector2D operator+(Vector2D other){
                Vector2D a(x+other.x,y+other.y);
                return a;
             }
                          Vector2D operator-(Vector2D other){
                              Vector2D a(x-other.x,y-other.y);
                              return a;
                          }
                                       double operator*(Vector2D other){
                                           double a = (x*other.x)+(y*other.y);
                                           return a;

                                       }
                                                    bool operator==(Vector2D other){
                                                         bool a = (x==other.x)&&(y==other.y);
                                                         return a;
                                                    }


   friend ostream& operator<<(ostream& os,Vector2D& vec) {
       os << "(" << vec.x << ", " << vec.y << ")";
       return os;
   }



private:
double x, y;
};
int main() {

    Vector2D vec1(5.0,1.0);
    Vector2D vec2(3.0,6.0);
    Vector2D sum = vec1 + vec2;
    Vector2D dum = vec1 - vec2;
    double rum = vec1 * vec2;
    bool tum = vec1 == vec2;
    cout<<sum<<dum<<vec1<<vec2<<rum<<" "<<tum;

return 0; }
